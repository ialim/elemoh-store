// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  username    String   @unique
  email       String   @unique
  password    String
  phoneNumber String   @unique
  isActive    Boolean  @default(false)
  profile     Profile?
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      Int
}

model Role {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String      @unique
  description String
  User        User[]
  permissions Permission?
}

model Permission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      String[]
  employee  String[]
  customer  String[]
  supplier  String[]
  product   String[]
  purchase  String[]
  settings  String[]
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int      @unique
}

model Profile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firstName String
  lastName  String
  Address   String[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?      @unique
  employee  Employee?
  customer  Customer?
  supplier  Supplier?
}

model Employee {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  profile      Profile    @relation(fields: [profileId], references: [id])
  profileId    Int        @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
}

model Department {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  employees Employee[]
}

model Customer {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  profile         Profile       @relation(fields: [profileId], references: [id])
  profileId       Int           @unique
  companyName     String?
  taxNumber       String?
  group           CustomerGroup @relation(fields: [customerGroupId], references: [id])
  customerGroupId Int
}

model CustomerGroup {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String     @unique
  percentage Int        @default(0)
  customers  Customer[]
}

model Supplier {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  profile     Profile          @relation(fields: [profileId], references: [id])
  profileId   Int              @unique
  companyName String
  VATNumber   String?
  variants    ProductVariant[]
  purchases   Purchase[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  code      String    @unique
  products  Product[]
}

model Facet {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String       @unique
  values    FacetValue[]
}

model FacetValue {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String           @unique
  facet           Facet            @relation(fields: [facetId], references: [id])
  facetId         Int
  productVariants ProductVariant[]
  collections     Collection[]
}

model Product {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String           @unique
  description String
  brand       Brand            @relation(fields: [brandId], references: [id])
  brandId     Int
  variants    ProductVariant[]
}

model ProductVariant {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String            @unique
  barcode         String            @unique
  isAvailable     Boolean           @default(false)
  product         Product           @relation(fields: [productId], references: [id])
  productId       Int
  facetValues     FacetValue[]
  collections     Collection[]
  suppliers       Supplier[]
  stockLevels      StockLevel[]
  stockHistory    StockHistory[]
  productPurchases ProductPurchase[]
}

model Collection {
  id         Int              @id @default(autoincrement())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  name       String           @unique
  facetVales FacetValue[]
  variants   ProductVariant[]
}

model Store {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String         @unique
  address      String[]
  phoneNumber  String
  stockLevels  StockLevel[]
  stockHistory StockHistory[]
  purchases    Purchase[]
}

model StockLevel {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  quantity         Int            @default(0)
  variant          ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  store            Store          @relation(fields: [storeId], references: [id])
  storeId          Int
}

model StockHistory {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  type             Type           @default(ADJUSTMENT)
  quantity         Int            @default(0)
  variant          ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  store            Store          @relation(fields: [storeId], references: [id])
  storeId          Int
}

model Purchase {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  reference       String            @unique
  status          Status            @default(PENDING)
  items           Int               @default(0)
  quantity        Int               @default(0)
  subTotal        Int               @default(0)
  tax             Int               @default(0)
  discount        Int               @default(0)
  shipping        Int               @default(0)
  grandTotal      Int               @default(0)
  store           Store             @relation(fields: [storeId], references: [id])
  storeId         Int
  supplier        Supplier          @relation(fields: [supplierId], references: [id])
  supplierId      Int
  productPurchases ProductPurchase[]
}

model ProductPurchase {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  quantity         Int            @default(0)
  received         Int            @default(0)
  unitCost         Int            @default(0)
  subTotal         Int            @default(0)
  tax              Int            @default(0)
  discount         Int            @default(0)
  variant          ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  purchase         Purchase       @relation(fields: [purchaseId], references: [id])
  purchaseId       Int
}

enum Status {
  ORDERD
  PARTIAL
  PENDING
  RECEIVED
}

enum Type {
  ADJUSTMENT
  PURCHASE
  RETURN
  SALE
  TRANSFER
}
